Nuestra propia CA en Centos
===========================

Setup your own CA
Recently, in our project we need enable tokenless auth for keystone, which means client or service can use client certificate to auth with out the token generated by keystone.

Following steps are the experiment I made on my development environment, and the os is centos7, my user account is cgomez, you should change it to your account accordingly.

Setup my own CA
Fristly, we need setup a CA to sign our client certificate.

Install openssl::

	sudo yum install openssl

After openssl is installed, find the openssl conf file, and change the data directory of the CA.::

	[root@localhost ~]# locate openssl.cnf
	/etc/pki/tls/openssl.cnf
	/usr/share/man/man5/openssl.cnf.5ssl.gz

Change the dir configuration in the openssl.cnf file::

	####################################################################
	[ ca ]
	default_ca      = CA_default            # The default ca section

	####################################################################
	[ CA_default ]

	#dir            = /etc/pki/CA           # Where everything is kept
	dir             = /home/cgomez/CA       # Where everything is kept

Then you should create related diretorys in /home/cgomez/CA to store related files, such as CSR(Certificate Signing Request) file, private key file, or certificates.::

	[cgomez@localhost CA]$ pwd
	/home/cgomez/CA
	[cgomez@localhost CA]$ mkdir certs newcerts private crl
	[cgomez@localhost CA]$ touch index.txt
	[cgomez@localhost CA]$ echo 01 > serial

This directory structure is very similar with the default data directory of CA::

	[cgomez@localhost CA]$ pwd
	/etc/pki/CA
	[cgomez@localhost CA]$ ls
	certs  crl  newcerts  private

certs is for signed certificates, newcerts is for new generated certificates, private is for private key files, crl is for revocation certificates.

Before generating any certificates, we need generated an random seed.::

	openssl rand -out private/.rand 1000

generate root certificate
++++++++++++++++++++++++++

* generate private key for root certificate

Openssl used PEM(Privacy Enbanced Mail) to store private key. Here is the command to generate the private key.::

	openssl genrsa -aes256 -out private/cakey.pem 1024


when executed this command, it will ask you to input a password for your key, you need to remember that, because openssl will ask you to input that password when it using this key file.

* generate csr

The CSR(Certificate Signing Request) is the file you send to CA to generate your Certificate, here is how to generate it::

	openssl req -new -key private/cakey.pem -out private/ca.csr -subj \
	  "/C=CN/ST=myprovince/L=mycity/O=myorganization/OU=mygroup/CN=myname"

* generate root certificate

here is the command, and the root ceritficate is stored at certs/ca.cer::

	openssl x509 -req -days 365 -sha1 -extensions v3_ca -signkey \
	  private/cakey.pem -in private/ca.csr -out certs/ca.cer


Now only rest, wait for a request and then sign.::

	openssl x509 -req -days 365 -sha1 -extfile myserver.conf -extensions v3_req -CA certs/ca.cer -CAkey private/cakey.pem -CAserial ca.srl -CAcreateserial -in private/server.csr -out certs/server.cer




