QUE SON?
=========

	keystore: es un almacén de certificados con claves privadas.
	
	truststore: es un almacén de certificados con claves públicas.

Un keystore puede contener tanto claves privadas como públicas, pero lo ideal es mantenerlos separados, mas que nada por claridad. 
Tanto el keystore como el truststore ademas de contener los certificados con claves públicas y/o privadas deben contener las CA’s 
que los autorizan. Las CA’s son autoridades certificadoras reconocidas(Certificate authority) a nivel mundial.


PARA QUE SIRVEN?
=================

Un keystore se suele usar por ejemplo en un servicio web, este para que puedas enviar una petición puede requerir un certificado con clave privada. 
Entonces en tu aplicación debes tener un keystore con el certificado que requiera el web service.

Un truststore se utiliza para negociar una conexión segura entre un cliente y un servidor. 
Por ejemplo tenemos una aplicación cliente que tiene hacer una petición https a un web service y obtener una serie de datos, 
para que esto funcione es necesario establecer una relación de confianza entre el cliente y el servidor. 
Lo que debemos hacer es descargar el certificado con clave pública del servidor, es fácil, desde el propio navegador se puede hacer, 
y lo añadimos a nuestro truststore.


COMO EMPLEARLO EN MI APLICACIÓN (JAVA)?
=======================================

Tenemos que indicarle, de alguna forma, a nuestra aplicación, en java, donde se encuentran nuestros almacenes de claves, 
su contraseña y el tipo de keystore o truststore con el que tratamos, lo haremos de la siguiente forma:

System.setProperty(“javax.net.ssl.keyStore”, “ruta_al_keyStore”);
System.setProperty(“javax.net.ssl.keyStorePassword”, “contraseña_del_keyStore”);
System.setProperty(“javax.net.ssl.keyStoreType“, “JKS”);
System.setProperty(“javax.net.ssl.trustStore”, “ruta_al_trustStore”);
System.setProperty(“javax.net.ssl.trustStorePassword”, “contraseña_del_trustStore”);
System.setProperty(“javax.net.ssl.trustStoreType“, “JKS”);


COMO HACER MI PROPIO KEYSTORE/TRUSTSTORE?
==============================================

Para crear un keystore/truststore existen varias formas, una de ellas por linea de comandos, 
empleando la utilidad keytool proporcionada por la jdk o jre y otra utilizando un programa gráfico (GUI), 
como puede ser el keystore explorer o el portecl


Las tareas utilizan keytool para crear el almacén de claves. Una alternativa es la herramienta gráfica ikeyman que requiere un sistema X Window.


A continuación encontrará los pasos necesarios para crear e inicializar el almacén de claves del intermediario:
1.- Cree el almacén de claves. keytool requiere que se cree una clave ficticia para forzar la creación del archivo de almacén de claves. 
La clave ficticia se suprime tras la creación del almacén de claves.

2.- Importe el certificado o los certificados de firmante de la entidad emisora de certificados (CA). 
Se trata de certificados que tienen certificados de firmante de aplicaciones cliente que se conectan a WebSphere Message Broker 
y que se aceptan como aplicaciones fiables.

A continuación encontrará mandatos de ejemplo para cada paso:

1.- Cree el almacén de claves JKS. Por ejemplo:

/usr/lpp/java/J6.0/bin/keytool -genkey   
     -alias DUMMY
     -keystore  /u/CSQPBRK/ssl/csqpbrkKeystore.jks 
     -storetype jks 
     -dname  "CN=DUMMY,OU=BROKER,O=IBM,L=Hursley,C=GB"
     -storepass changeit 
     -keypass changeit

2.- Suprima la clave ficticia. Por ejemplo:

/usr/lpp/java/J6.0/bin/keytool -delete  
     -alias DUMMY
     -keystore  /u/CSQPBRK/ssl/csqpbrkKeystore.jks
     -storepass changeit

4.- Opcional: Importe el certificado personal del intermediario. 
Sáltese este paso si necesita archivos independientes para un almacén de claves y un almacén de confianza 
y si está creando un almacén de confianza. Por ejemplo:

/usr/lpp/java/J6.0/bin/keytool -import  
  -keystore /u/CSQPBRK/ssl/csqbrkKeystore.jks
  -storepass changeit
  -alias CSQPBRK
  -file /u/CSQPBRK/ssl/csqpbrk.pers.p12 
  -v 
  -pkcs12
  -keypass changeit 
  -noprompt

5.- Liste el contenido del almacén de claves del intermediario. Por ejemplo:

/usr/lpp/java/J6.0/bin/keytool -list  -v
   -keystore /u/CSQPBRK/ssl/csqbrkKeystore.jks
   -storepass changeit


=======================================================================================================================
=======================================================================================================================
=======================================================================================================================

Ejemplo: nos suministran un certificado y una CA y debemos solamente el certificado colocarlo dentro de un keystore

root.cer
SRV-VCCS-ENTRP.credicard.com.ve.cer

# keytool -import -keystore keystore -storepass credicard -alias tomcat -file SRV-VCCS-ENTRP.credicard.com.ve.cer -v

# keytool -list -v -keystore keystore
Enter keystore password:

*****************  WARNING WARNING WARNING  *****************
* The integrity of the information stored in your keystore  *
* has NOT been verified!  In order to verify its integrity, *
* you must provide your keystore password.                  *
*****************  WARNING WARNING WARNING  *****************

Keystore type: JKS
Keystore provider: SUN

Your keystore contains 1 entry

Alias name: tomcat
Creation date: Jul 12, 2017
Entry type: trustedCertEntry

Owner: CN=SRV-VCCS-ENTRP.credicard.com.ve, OU=Criptografia, O=Consorcio Credicard C.A, L=Caracas, ST=Distrito Capital, C=VE
Issuer: CN=Consorcio Credicard CA, OU=Criptografia, O=Consorcio Credicard CA, L=Caracas, ST=Distrito Capital, C=VE
Serial number: 25e76a22c45f86b
Valid from: Mon Jul 10 15:09:14 VET 2017 until: Wed Jul 10 15:09:14 VET 2019
Certificate fingerprints:
         MD5:  F5:CB:B6:95:66:14:19:14:02:D4:28:8E:3D:75:8F:87
         SHA1: 1E:5B:8F:F0:09:CD:FC:C1:F3:99:E8:8F:C6:A6:D7:B3:A4:A4:01:D7
         SHA256: 96:FA:85:DE:0E:D5:23:69:AF:D5:63:DB:E0:C0:11:83:FD:C2:5F:A8:98:E6:AF:78:8C:A4:19:8D:12:DA:74:E0
         Signature algorithm name: SHA256withRSA
         Version: 1


*******************************************
*******************************************


=======================================================================================================================
=======================================================================================================================
=======================================================================================================================

Si quermos borrar algun certificado de un keystore debemos saber su Alias y ejecutamos


keytool -delete -noprompt -alias 'ws.credicard.com.ve (consorcio credicard ca)'  -keystore wso2carbon.jks -storepass DIP9863LONDR3S3cu4d0
